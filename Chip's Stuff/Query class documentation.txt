Query.userByUsername(<username>)
	-<username> is a object of class String 
	-returns an integer value equal to the UserID of the user with the username <username>
	-If User with a username of <username> does not exist throws UserNotFound exception
		-Surround with a try/catch

Query.userByUserID(<userID>)
	-<userID> is a integer
	-Returns an Object of class User that contains the information from the database
	-If <userID> does not exist throws UserNotFound exception
		-surround with try/catch

Query.updateUser(<user>)
	-<user> is an object of class User
	-void method
	-if <user>'s userID already Exists, the database will replace all the fields in the
		database with the values in the class
	-if <user>'s userID does not exist, throws UserNotFound exception
		-surround with a try/catch

Query.addUser(<user>)
	-<user> is an object of class User
	-Returns an Object of class User that is exactly the same as the input object except
		for the userID which will now be updated to equal the one in the database
	-if <user>'s username already exists, throws UserAlreadyExist exception
		-surround with a try/catch

Query.deleteUser(<userID>)
	-<userID> is an integer
	-void method
	-if <userID> exists, it is deleted from the database
	-if <userID> does not exist, throws UserNotFound exception
		-surround with a try/catch

Query.groupByGroupName(<groupName>)
	-<groupName> is a object of class String 
	-returns an integer value equal to the groupID of the group with the groupName <groupName>
	-If group with a groupName of <groupName> does not exist throws GroupNotFound exception
		-Surround with a try/catch

Query.groupByGroupID(<groupID>)
	-<groupID> is a integer
	-Returns an Object of class Group that contains the information from the database
	-If <groupID> does not exist throws GroupNotFound exception
		-surround with try/catch

Query.createGroup(<group>, <userID>)
	-<group> is an object of type Group
	-<userID> is an integer
	-Returns an object of type Group that is the same as <group> except that GroupID will
		now reflect the database
	-if a group with <groupName> exists in the databse, returns GroupAlreadyExist exception
		-surround with a try/catch
	-if no user with <userID> exists, returns UserNotFound exception
	-otherwise, group created in database with contents of <group>
	-also, groupMembers entry created in databse between userID, groupID and isAdmin set to true

Query.updateGroup(<group>, <userID>)
	-<group> is an object of type Group
	-<userID> is an integer
	-void method
	-if <group> does not exist, throws GroupNotFound exception
	-if <userID> is not admin of <group> (or doesn't exist) throws NotAdmin exception
	-changes the group entry in the database with <group>'s ID with the contents of <group>

Query.joinGroup(<userID>, <groupID>)
	-<userID> is an integer
	-<groupID> is an integer
	-void method
	-if <userID> does not exist, throws UserNotFound exception
	-if <groupID> does not exist, throws GroupNotFound exception
	-if relationship between <userID> and <groupID> found in kickedFromGroup, throws UserBanned exception
	-if relationship between <userID and <groupID> found in groupMembers, throws AlreadyJoinedGroup exception
	-otherwise, creates new entry in groupMembers of relationship between <userID> and <groupID> with
		isAdmin set to false

Query.makeAdmin(<adminUserID>, <userID>, <groupID>)
	-<adminUserID> is an integer
	-<userID> is an integer
	-<groupID> is an integer
	-void method
	-if <groupID> does not exist, throws GroupNotFound exception
	-if relationship in groupMembers <adminUserID> and <groupID> has isAdmin = false (or relationship doesn't
		exist or adminUserID doesn't exist) throws, NotAdmin exception
	-if relationship in groupMembers <userID> and <groupID> doesn't exist (or <userID> doesn't exist), throws
		NotGroupMember exception
	-otherwise, updates the relationship between <userID> and <groupID> to be admin

Query.stopAdmin

Query.unjoinGroup

Query.banUserFromGroup

Query.unbanUserFromGroup

Query.createEvent

Query.eventByEventName

Query.eventByEventID

Query.editEvent

Query.cancelEvent

Query.joinEvent

Query.unjoinEvent

Query.banUserFromEvent

Query.unbanUserFromEvent

Query.addImage

Query.removeImage